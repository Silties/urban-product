<?php
class ControllerProductProduct extends Controller {
	private $error = array();

	public function index() {
		$this->load->language('product/product');

		$data['breadcrumbs'] = array();

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_home'),
			'href' => $this->url->link('common/home')
		);

		$this->load->model('catalog/category');

		if (isset($this->request->get['path'])) {
			$path = '';

			$parts = explode('_', (string)$this->request->get['path']);

			$category_id = (int)array_pop($parts);

			foreach ($parts as $path_id) {
				if (!$path) {
					$path = $path_id;
				} else {
					$path .= '_' . $path_id;
				}

				$category_info = $this->model_catalog_category->getCategory($path_id);

				if ($category_info) {
					$data['breadcrumbs'][] = array(
						'text' => $category_info['name'],
						'href' => $this->url->link('product/category', 'path=' . $path)
					);
				}
			}

			// Set the last category breadcrumb
			$category_info = $this->model_catalog_category->getCategory($category_id);

			if ($category_info) {
				$url = '';

				if (isset($this->request->get['sort'])) {
					$url .= '&sort=' . $this->request->get['sort'];
				}

				if (isset($this->request->get['order'])) {
					$url .= '&order=' . $this->request->get['order'];
				}

				if (isset($this->request->get['page'])) {
					$url .= '&page=' . $this->request->get['page'];
				}

				if (isset($this->request->get['limit'])) {
					$url .= '&limit=' . $this->request->get['limit'];
				}

				$data['breadcrumbs'][] = array(
					'text' => $category_info['name'],
					'href' => $this->url->link('product/category', 'path=' . $this->request->get['path'] . $url)
				);
			}
		}

		$this->load->model('catalog/manufacturer');

		if (isset($this->request->get['manufacturer_id'])) {
			$data['breadcrumbs'][] = array(
				'text' => $this->language->get('text_brand'),
				'href' => $this->url->link('product/manufacturer')
			);

			$url = '';

			if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			}

			if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			}

			if (isset($this->request->get['page'])) {
				$url .= '&page=' . $this->request->get['page'];
			}

			if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			}

			$manufacturer_info = $this->model_catalog_manufacturer->getManufacturer($this->request->get['manufacturer_id']);

			if ($manufacturer_info) {
				$data['breadcrumbs'][] = array(
					'text' => $manufacturer_info['name'],
					'href' => $this->url->link('product/manufacturer/info', 'manufacturer_id=' . $this->request->get['manufacturer_id'] . $url)
				);
			}
		}

		if (isset($this->request->get['search']) || isset($this->request->get['tag'])) {
			$url = '';

			if (isset($this->request->get['search'])) {
				$url .= '&search=' . $this->request->get['search'];
			}

			if (isset($this->request->get['tag'])) {
				$url .= '&tag=' . $this->request->get['tag'];
			}

			if (isset($this->request->get['description'])) {
				$url .= '&description=' . $this->request->get['description'];
			}

			if (isset($this->request->get['category_id'])) {
				$url .= '&category_id=' . $this->request->get['category_id'];
			}

			if (isset($this->request->get['sub_category'])) {
				$url .= '&sub_category=' . $this->request->get['sub_category'];
			}

			if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			}

			if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			}

			if (isset($this->request->get['page'])) {
				$url .= '&page=' . $this->request->get['page'];
			}

			if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			}

			$data['breadcrumbs'][] = array(
				'text' => $this->language->get('text_search'),
				'href' => $this->url->link('product/search', $url)
			);
		}

		if (isset($this->request->get['product_id'])) {
			$product_id = (int)$this->request->get['product_id'];
		} else {
			$product_id = 0;
		}

		$this->load->model('catalog/product');

		$product_info = $this->model_catalog_product->getProduct($product_id);

		//check product page open from cateory page
		if (isset($this->request->get['path'])) {
			$parts = explode('_', (string)$this->request->get['path']);
						
			if(empty($this->model_catalog_product->checkProductCategory($product_id, $parts))) {
				$product_info = array();
			}
		}

		//check product page open from manufacturer page
		if (isset($this->request->get['manufacturer_id']) && !empty($product_info)) {
			if($product_info['manufacturer_id'] !=  $this->request->get['manufacturer_id']) {
				$product_info = array();
			}
		}

		if ($product_info) {
			$url = '';

			if (isset($this->request->get['path'])) {
				$url .= '&path=' . $this->request->get['path'];
			}

			if (isset($this->request->get['filter'])) {
				$url .= '&filter=' . $this->request->get['filter'];
			}

			if (isset($this->request->get['manufacturer_id'])) {
				$url .= '&manufacturer_id=' . $this->request->get['manufacturer_id'];
			}

			if (isset($this->request->get['search'])) {
				$url .= '&search=' . $this->request->get['search'];
			}

			if (isset($this->request->get['tag'])) {
				$url .= '&tag=' . $this->request->get['tag'];
			}

			if (isset($this->request->get['description'])) {
				$url .= '&description=' . $this->request->get['description'];
			}

			if (isset($this->request->get['category_id'])) {
				$url .= '&category_id=' . $this->request->get['category_id'];
			}

			if (isset($this->request->get['sub_category'])) {
				$url .= '&sub_category=' . $this->request->get['sub_category'];
			}

			if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			}

			if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			}

			if (isset($this->request->get['page'])) {
				$url .= '&page=' . $this->request->get['page'];
			}

			if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			}

			$data['breadcrumbs'][] = array(
				'text' => $product_info['name'],
				'href' => $this->url->link('product/product', $url . '&product_id=' . $this->request->get['product_id'])
			);

			$this->document->setTitle($product_info['meta_title']);
			$this->document->setDescription($product_info['meta_description']);
			$this->document->setKeywords($product_info['meta_keyword']);
			$this->document->addLink($this->url->link('product/product', 'product_id=' . $this->request->get['product_id']), 'canonical');
			$this->document->addScript('catalog/view/javascript/jquery/magnific/jquery.magnific-popup.min.js');
			$this->document->addStyle('catalog/view/javascript/jquery/magnific/magnific-popup.css');
			$this->document->addScript('catalog/view/javascript/jquery/datetimepicker/moment/moment.min.js');
			$this->document->addScript('catalog/view/javascript/jquery/datetimepicker/moment/moment-with-locales.min.js');
			$this->document->addScript('catalog/view/javascript/jquery/datetimepicker/bootstrap-datetimepicker.min.js');
			$this->document->addStyle('catalog/view/javascript/jquery/datetimepicker/bootstrap-datetimepicker.min.css');
            $this->document->addScript('catalog/view/javascript/product-lazy.js');

			$data['heading_title'] = $product_info['name'];

			$data['text_minimum'] = sprintf($this->language->get('text_minimum'), $product_info['minimum']);
			$data['text_login'] = sprintf($this->language->get('text_login'), $this->url->link('account/login', '', true), $this->url->link('account/register', '', true));

			$this->load->model('catalog/review');

			$data['tab_review'] = sprintf($this->language->get('tab_review'), $product_info['reviews']);

			$data['product_id'] = (int)$this->request->get['product_id'];
			$data['manufacturer'] = $product_info['manufacturer'];
			$data['manufacturers'] = $this->url->link('product/manufacturer/info', 'manufacturer_id=' . $product_info['manufacturer_id']);
			$data['model'] = $product_info['model'];
			$data['reward'] = $product_info['reward'];
			$data['points'] = $product_info['points'];
			$data['description'] = html_entity_decode($product_info['description'], ENT_QUOTES, 'UTF-8');

			if ($product_info['quantity'] <= 0) {
				$data['stock'] = $product_info['stock_status'];
			} elseif ($this->config->get('config_stock_display')) {
				$data['stock'] = $product_info['quantity'];
			} else {
				$data['stock'] = $this->language->get('text_instock');
			}

			$this->load->model('tool/image');

			if ($product_info['image']) {
				$data['popup'] = $this->model_tool_image->resize($product_info['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_popup_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_popup_height'));
			} else {
				$data['popup'] = '';
			}

			if ($product_info['image']) {
				$data['thumb'] = $this->model_tool_image->resize($product_info['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_thumb_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_thumb_height'));
			} else {
				$data['thumb'] = '';
			}

			$data['images'] = array();

			$results = $this->model_catalog_product->getProductImages($this->request->get['product_id']);

			foreach ($results as $result) {
				$data['images'][] = array(
					'popup' => $this->model_tool_image->resize($result['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_popup_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_popup_height')),
					'thumb' => $this->model_tool_image->resize($result['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_height'))
				);
			}

			if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
				$data['price'] = $this->currency->format($this->tax->calculate($product_info['price'], $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
			} else {
				$data['price'] = false;
			}

			if (!is_null($product_info['special']) && (float)$product_info['special'] >= 0) {
				$data['special'] = $this->currency->format($this->tax->calculate($product_info['special'], $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
				$tax_price = (float)$product_info['special'];
			} else {
				$data['special'] = false;
				$tax_price = (float)$product_info['price'];
			}

			if ($this->config->get('config_tax')) {
				$data['tax'] = $this->currency->format($tax_price, $this->session->data['currency']);
			} else {
				$data['tax'] = false;
			}

			$discounts = $this->model_catalog_product->getProductDiscounts($this->request->get['product_id']);

			$data['discounts'] = array();

			foreach ($discounts as $discount) {
				$data['discounts'][] = array(
					'quantity' => $discount['quantity'],
					'price'    => $this->currency->format($this->tax->calculate($discount['price'], $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency'])
				);
			}

			$data['options'] = array();

			foreach ($this->model_catalog_product->getProductOptions($this->request->get['product_id']) as $option) {
				$product_option_value_data = array();

				foreach ($option['product_option_value'] as $option_value) {
					if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
						if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
							$price = $this->currency->format($this->tax->calculate($option_value['price'], $product_info['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $this->session->data['currency']);
						} else {
							$price = false;
						}

						$product_option_value_data[] = array(
							'product_option_value_id' => $option_value['product_option_value_id'],
							'option_value_id'         => $option_value['option_value_id'],
							'name'                    => $option_value['name'],
							'image'                   => $this->model_tool_image->resize($option_value['image'], 50, 50),
							'price'                   => $price,
							'price_prefix'            => $option_value['price_prefix']
						);
					}
				}

				$data['options'][] = array(
					'product_option_id'    => $option['product_option_id'],
					'product_option_value' => $product_option_value_data,
					'option_id'            => $option['option_id'],
					'name'                 => $option['name'],
					'type'                 => $option['type'],
					'value'                => $option['value'],
					'required'             => $option['required']
				);
			}

			if ($product_info['minimum']) {
				$data['minimum'] = $product_info['minimum'];
			} else {
				$data['minimum'] = 1;
			}

			$data['review_status'] = $this->config->get('config_review_status');

			if ($this->config->get('config_review_guest') || $this->customer->isLogged()) {
				$data['review_guest'] = true;
			} else {
				$data['review_guest'] = false;
			}

			if ($this->customer->isLogged()) {
				$data['customer_name'] = $this->customer->getFirstName() . '&nbsp;' . $this->customer->getLastName();
			} else {
				$data['customer_name'] = '';
			}

			$data['reviews'] = sprintf($this->language->get('text_reviews'), (int)$product_info['reviews']);
			$data['rating'] = (int)$product_info['rating'];

			// Captcha
			if ($this->config->get('captcha_' . $this->config->get('config_captcha') . '_status') && in_array('review', (array)$this->config->get('config_captcha_page'))) {
				$data['captcha'] = $this->load->controller('extension/captcha/' . $this->config->get('config_captcha'));
			} else {
				$data['captcha'] = '';
			}

			$data['share'] = $this->url->link('product/product', 'product_id=' . (int)$this->request->get['product_id']);

			$data['attribute_groups'] = $this->model_catalog_product->getProductAttributes($this->request->get['product_id']);

			$data['products'] = array();

			$results = $this->model_catalog_product->getProductRelated($this->request->get['product_id']);

			foreach ($results as $result) {
				if ($result['image']) {
					$image = $this->model_tool_image->resize($result['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_related_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_related_height'));
				} else {
					$image = $this->model_tool_image->resize('placeholder.png', $this->config->get('theme_' . $this->config->get('config_theme') . '_image_related_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_related_height'));
				}

				if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
					$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
				} else {
					$price = false;
				}

				if (!is_null($result['special']) && (float)$result['special'] >= 0) {
					$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
					$tax_price = (float)$result['special'];
				} else {
					$special = false;
					$tax_price = (float)$result['price'];
				}
	
				if ($this->config->get('config_tax')) {
					$tax = $this->currency->format($tax_price, $this->session->data['currency']);
				} else {
					$tax = false;
				}

				if ($this->config->get('config_review_status')) {
					$rating = (int)$result['rating'];
				} else {
					$rating = false;
				}

				$data['products'][] = array(
					'product_id'  => $result['product_id'],
					'thumb'       => $image,
					'name'        => $result['name'],
					'description' => utf8_substr(trim(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8'))), 0, $this->config->get('theme_' . $this->config->get('config_theme') . '_product_description_length')) . '..',
					'price'       => $price,
					'special'     => $special,
					'tax'         => $tax,
					'minimum'     => $result['minimum'] > 0 ? $result['minimum'] : 1,
					'rating'      => $rating,
					'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id'])
				);
			}

			$data['tags'] = array();

			if ($product_info['tag']) {
				$tags = explode(',', $product_info['tag']);

				foreach ($tags as $tag) {
					$data['tags'][] = array(
						'tag'  => trim($tag),
						'href' => $this->url->link('product/search', 'tag=' . trim($tag))
					);
				}
			}

			$data['recurrings'] = $this->model_catalog_product->getProfiles($this->request->get['product_id']);

			$this->model_catalog_product->updateViewed($this->request->get['product_id']);

			if($product_info['delivery_days'] != '' && $product_info['dispatch_days'] != '') {
			    $data['shipping_policy'] = true;
			    if(isset($this->session->data['shipping_address']['country_id'])) {
                  $this->session->data['shipping_policy_country'] = $this->session->data['shipping_address']['country_id'];
                }
                if(isset($this->session->data['shipping_address']['zone_id'])) {
                  $this->session->data['shipping_policy_zone'] = $this->session->data['shipping_address']['zone_id'];
                }
                if(isset($this->session->data['shipping_address']['postcode'])) {
                  $this->session->data['shipping_policy_postcode'] = $this->session->data['shipping_address']['postcode'];
                }
                
                if(!isset($this->session->data['shipping_address']['country_id']) && isset($this->session->data['payment_address']['country_id'])) {
                  $this->session->data['shipping_policy_country'] = $this->session->data['payment_address']['country_id'];
                }
                if(!isset($this->session->data['shipping_address']['zone_id']) && isset($this->session->data['payment_address']['zone_id'])) {
                  $this->session->data['shipping_policy_zone'] = $this->session->data['payment_address']['zone_id'];
                }
                if(!isset($this->session->data['shipping_address']['postcode']) && isset($this->session->data['payment_address']['postcode'])) {
                  $this->session->data['shipping_policy_postcode'] = $this->session->data['payment_address']['postcode'];
                }
                
                if(!isset($this->session->data['shipping_policy_country'])){
                  $this->session->data['shipping_policy_country'] = $this->config->get('config_country_id');
                }
                if(!isset($this->session->data['shipping_policy_zone'])){
                  $this->session->data['shipping_policy_zone'] = $this->config->get('config_zone_id');
                }
                if(!isset($this->session->data['shipping_policy_postcode'])){
                  $this->session->data['shipping_policy_postcode'] = ''; // $this->config->get('config_zone_id');
                }
                
                $data['shipping_policy_current_date'] = date("d M.");
                $dispatch_order = $product_info['dispatch_days'];
                $dispatch_order = explode("-",$dispatch_order);
                if(count($dispatch_order) == 1){
                  $data['shipping_policy_order_date'] = date('d M.', strtotime(date('Y-m-d') . ' + '. $dispatch_order[0].' days'));
                } else {
                  $data['shipping_policy_order_date'] = date('d M.-', strtotime(date('Y-m-d') . ' + '. $dispatch_order[0].' days')) . date('d M.', strtotime(date('Y-m-d') . ' + '. $dispatch_order[1].' days'));
                }
                
                $days = explode("-",$product_info['delivery_days']);
                if(count($days) == 1){
                    $data['shipping_policy_deliver_date'] = date('d M.', strtotime(date('Y-m-d') . ' + '. $days[0].' days'));
                } else {
                    $data['shipping_policy_deliver_date'] = date('d M.-', strtotime(date('Y-m-d') . ' + '. $days[0].' days')) . date('d M.', strtotime(date('Y-m-d') . ' + '. $days[1].' days'));
                }
                
                $data['shipping_country_id'] = $this->session->data['shipping_policy_country'];
                $data['shipping_zone_id'] = $this->session->data['shipping_policy_zone'];
                $data['shipping_postcode'] = $this->session->data['shipping_policy_postcode'];
                
                $data['shipping_policy_pickup'] = false;
                $saller_product = $this->db->query("SELECT * FROM `" . DB_PREFIX . "purpletree_vendor_products` WHERE product_id = '" . $product_id . "'")->row;
                
                // Mubi
                $store_detail = $this->db->query("SELECT id FROM `" . DB_PREFIX . "purpletree_vendor_stores` WHERE seller_id = '" . $saller_product['seller_id'] . "' AND store_status=1");
                if($store_detail->num_rows){
    				$store_id =  $store_detail->row['id'];
    			} else {
    				$store_id = '';
    			}
    			// End Mubi
    			
                if(!empty($saller_product)) {  
                    //$saller_product['seller_id']=2;
                    //$pickup_status = $this->config->get($saller_product['seller_id'].'_seller_shipping_pickup_status');
                    $pickup_status = $this->config->get($store_id.'_seller_shipping_pickup_status');
                    
                    if($pickup_status) {
                        $pickup_zone = $this->config->get($store_id.'_seller_shipping_pickup_geo_zone_id');
                        $query = $this->db->query("SELECT * FROM " . DB_PREFIX . "zone_to_geo_zone WHERE geo_zone_id = '" . (int)$pickup_zone . "' AND country_id = '" . (int)$data['shipping_country_id'] . "' AND (zone_id = '" . (int)$data['shipping_zone_id'] . "' OR zone_id = '0')");
                        if ($pickup_zone == 0 || $query->num_rows)
                			$data['shipping_policy_pickup'] = true;
                    }
                    
                    $available = false; $f_cost = 999999;
                    
                    if($product_info['shipping_charge'] != '' and $product_info['shipping_charge'] != 0 ) {
                        $available = true;
                        $f_cost = $product_info['shipping_charge'];
                    } else {
                        $shipping_statuses = $this->db->query("SELECT * FROM `" . DB_PREFIX . "setting` WHERE `code` != '".$store_id."_seller_shipping_pickup' AND `key` like '".$store_id."_seller_shipping_%_status'")->rows;
                        
                        foreach($shipping_statuses as $shipping) {
                            if($shipping['value'] == 1) {
                                if($shipping['code'] == $store_id . '_seller_shipping_free') {
                                    $available = true; 
                                    $f_cost = 0.00;
                                    break;
                                }
                                $geo_zone = $this->config->get($shipping['code'] . '_geo_zone_id');
                                $query = $this->db->query("SELECT * FROM " . DB_PREFIX . "zone_to_geo_zone WHERE geo_zone_id = '" . (int)$geo_zone . "' AND country_id = '" . (int)$data['shipping_country_id'] . "' AND (zone_id = '" . (int)$data['shipping_zone_id'] . "' OR zone_id = '0')");
                                if ($geo_zone == 0 || $query->num_rows) {
                                    $cost = $this->config->get($shipping['code'] . '_cost');
                                    if($cost != '' && floatval($cost) < floatval($f_cost)) {
                                        $f_cost = $cost;
                                        $available = true;
                                    }
                                    $rates_d = $this->config->get(str_replace('status', 'rate', $shipping['key']));
                                    if($rates_d != '' && $product_info['weight'] > 0) {
                                        $rates = explode(',', $rates_d);
                                        $r_cost = 999999;
                                        foreach ($rates as $rate) {
                        					$dt = explode(':', $rate);
                        					if ($dt[0] >= $product_info['weight']) {
                        						if (isset($dt[1])) {
                        							$r_cost = $dt[1]; 
                        						}
                        						break;
                        					}
                        				}
                        				if(floatval($r_cost) < floatval($f_cost)) {
                                            $f_cost = $r_cost;
                                            $available = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    $data['shipping_policy_cost_available'] = $available;
                    $data['shipping_policy_deliver_cost'] = $this->currency->format($f_cost, $this->session->data['currency']);
                    
                }

			} else {

			    $data['shipping_policy'] = false;
			    
			    $data['shipping_country_id'] = $this->session->data['shipping_policy_country'];
                $data['shipping_zone_id'] = $this->session->data['shipping_policy_zone'];
                $data['shipping_postcode'] = $this->session->data['shipping_policy_postcode'];
			    	// Mubi (display sippi cost if estimate is not set)

                $this->load->model('setting/extension');
                $results = $this->model_setting_extension->getExtensions('shipping');
                
                if($this->config->get('module_purpletree_multivendorshipping_shipping_method') and $this->config->get('module_purpletree_multivendorshipping_status')){
                
                	$allow_shipping=array(
                	'ec_ship',
                	'fedex',
                	'flat',
                	'free',
                	'hitdhlexpress',
                	'item',
                	'pickup',
                	'ups',
                	'usps',
                	'weight',
                
                	);
                
                	$working_shipping_method=$allow_shipping=array(
                	'flat',
                	'free',
                	'pickup',
                	'weight',
                
                
                	);
                
                	$shipping_methods =$results;
                	$results = array();
                	if(!empty($shipping_methods)){
                		foreach($shipping_methods as $key=>$value){
                			if(in_array($value['code'],$allow_shipping)){
                				if(in_array($value['code'],$working_shipping_method)){
                					$results[] = $value;
                				}
                			}
                		}
                	}
                }
                
                
                $seller_store_id = array();	
                if($this->config->get('module_purpletree_multivendorshipping_shipping_method') and $this->config->get('module_purpletree_multivendorshipping_status')){
                	$mstore_id = 0;
                	if(!empty($product_info)){
                		$shippingdata = array();
                		$this->load->model('extension/purpletree_multivendor/shipping/seller_shipping_method');
                		$seller_detail = $this->model_extension_purpletree_multivendor_shipping_seller_shipping_method->is_seller_product($product_info['product_id']);
                		
                		if (!empty($seller_detail)){ 
                			$store_detail = $this->model_extension_purpletree_multivendor_shipping_seller_shipping_method->getStoreDetail($seller_detail['seller_id']);
                			if (!empty($store_detail)){ 
                					$mstore_id = $store_detail['id'];
                				
                				if(($product_info['shipping_charge'] != '' and $product_info['shipping_charge'] != 0 )){
							        $product_shipping_charge = $product_info['shipping_charge'];
							        
							        $data['shippings'][] = array(
									    'name' => 'Product Shipping Rate',
									    'cost' => $product_shipping_charge 
									);
							    }else{

							        foreach ($results as $result) {
                
                					$shipping_method_stutus=false;
                					if($this->config->get('module_purpletree_multivendorshipping_shipping_method') and $this->config->get('module_purpletree_multivendorshipping_status')){

                						if ($this->config->get($store_detail['id'].'_seller_'.'shipping_' . $result['code'] . '_status')) {
                							    
        							        if($result['code'] == 'flat'){
            									$data['shippings'][] = array(
        										    'name' => 'Flat Shipping Rate',
        										    'cost' => $this->config->get($store_detail['id'].'_seller_'.'shipping_' . $result['code'] . '_cost')
        										);
            								 }   
		
            								if($result['code'] == 'pickup'){
            								    
            									$data['shippings'][] = array(
            										'name' => 'Pickup From Store',
            										'cost' => 0 
            										);
            								}
            								
            								if($result['code'] == 'free'){
            									$data['shippings'][] = array(
            										'name' => 'Free Shipping',
            										'cost' => 0 
            										);
            								}
                								
                								
                							if($result['code'] == 'weight'){
                							    
            									if ($this->config->get($mstore_id.'_seller_'.'shipping_weight_17_status')) {
            										
            									    
            									    $data['shipping_country_id'] = $this->session->data['shipping_policy_country'];
                                                    //$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "zone_to_geo_zone WHERE geo_zone_id = '" . (int)$geo_zone . "' AND country_id = '" . (int)$data['shipping_country_id'] . "' AND (zone_id = '" . (int)$data['shipping_zone_id'] . "' OR zone_id = '0')");

            										$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "zone_to_geo_zone WHERE geo_zone_id = 17 AND country_id = 13 ");
            										
            										if ($query->num_rows) {
            											$status = true;
            										} else {
            											$status = false;
            										}
            										
            									}
                										
        									    if ($status) {
        										
            										$cost = '';
            						
            										$rates_d = $this->config->get($store_detail['id'].'_seller_'.'shipping_weight_17_rate');
            										
            										if($rates_d != '' && $product_info['weight'] >= 0) {
                                                        $rates = explode(',', $rates_d);
                                                        $r_cost = 999999;
                                                        foreach ($rates as $rate) {
                                        					$dt = explode(':', $rate);
                                        					if ($dt[0] >= $product_info['weight']) {
                                        						if (isset($dt[1])) {
                                        							$r_cost = $dt[1]; 
                                        						}
                                        						break;
                                        					}
                                        				}

                                                        $data['shippings'][] = array(
                											'name' => 'Weight Based Shipping',
                										    'cost' =>  $r_cost
                										);
                                                        
                                                    }
            										
            										
            										
        											
        									    }
        									    
        									    /*
        									    $shipping_statuses = $this->db->query("SELECT * FROM `" . DB_PREFIX . "setting` WHERE `code` != '".$store_detail['id']."_seller_shipping_pickup' AND `key` like '".$store_detail['id']."_seller_shipping_%_status'")->rows;
                                    
                                                foreach($shipping_statuses as $shipping) {
                                                    
                                                    if($shipping['value'] == 1) {
                                                        
                                                        $geo_zone = $this->config->get($shipping['code'] . '_geo_zone_id');
                                                        $query = $this->db->query("SELECT * FROM " . DB_PREFIX . "zone_to_geo_zone WHERE geo_zone_id = '" . (int)$geo_zone . "' AND country_id = '" . (int)$data['shipping_country_id'] . "' AND (zone_id = '" . (int)$data['shipping_zone_id'] . "' OR zone_id = '0')");
                                                        print_r($geo_zone);
                                                        if ($geo_zone == 0 || $query->num_rows) {
                                                            
                                                            $cost = $this->config->get($shipping['code'] . '_cost');
                                                            
                                                            if($cost != '' && floatval($cost) < floatval($f_cost)) {
                                                                $f_cost = $cost;
                                                                $available = true;
                                                            }
                                                            $rates_d = $this->config->get(str_replace('status', 'rate', $shipping['key']));
                                                            if($rates_d != '' && $product_info['weight'] > 0) {
                                                                $rates = explode(',', $rates_d);
                                                                $r_cost = 999999;
                                                                foreach ($rates as $rate) {
                                                					$dt = explode(':', $rate);
                                                					if ($dt[0] >= $product_info['weight']) {
                                                						if (isset($dt[1])) {
                                                							$r_cost = $dt[1]; 
                                                						}
                                                						break;
                                                					}
                                                				}
                                                				if(floatval($r_cost) < floatval($f_cost)) {
                                                                    $f_cost = $r_cost;
                                                                    
                                                                    $data['shippings'][] = array(
                            											'name' => 'Weight Based Shipping',
                            										    'cost' =>  $f_cost
                            										);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                */
                							
                							
                							}
                						        
                							
                						}
                					}		
                					$seller_store_id[$store_detail['id']] = true;
                				}
							    }
                							    
                				
                			} else {
                				$seller_store_id['0'] = true;
                			}
                		}
                	}
                }
                
                // End Mubi
			}
			
			$data['column_left'] = $this->load->controller('common/column_left');
			$data['column_right'] = $this->load->controller('common/column_right');
			$data['content_top'] = $this->load->controller('common/content_top');
			$data['content_bottom'] = $this->load->controller('common/content_bottom');
			$data['footer'] = $this->load->controller('common/footer');
			$data['header'] = $this->load->controller('common/header');
if (isset($this->request->get['preview']) && $this->request->get['preview'] == 1) {
    // Preview the new template
    $this->response->setOutput(
        $this->load->view('product/new_template', $data)
    );
    // Load the original template
			$this->response->setOutput($this->load->view('product/product', $data));
		} else {
			$url = '';

			if (isset($this->request->get['path'])) {
				$url .= '&path=' . $this->request->get['path'];
			}

			if (isset($this->request->get['filter'])) {
				$url .= '&filter=' . $this->request->get['filter'];
			}

			if (isset($this->request->get['manufacturer_id'])) {
				$url .= '&manufacturer_id=' . $this->request->get['manufacturer_id'];
			}

			if (isset($this->request->get['search'])) {
				$url .= '&search=' . $this->request->get['search'];
			}

			if (isset($this->request->get['tag'])) {
				$url .= '&tag=' . $this->request->get['tag'];
			}

			if (isset($this->request->get['description'])) {
				$url .= '&description=' . $this->request->get['description'];
			}

			if (isset($this->request->get['category_id'])) {
				$url .= '&category_id=' . $this->request->get['category_id'];
			}

			if (isset($this->request->get['sub_category'])) {
				$url .= '&sub_category=' . $this->request->get['sub_category'];
			}

			if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			}

			if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			}

			if (isset($this->request->get['page'])) {
				$url .= '&page=' . $this->request->get['page'];
			}

			if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			}

			$data['breadcrumbs'][] = array(
				'text' => $this->language->get('text_error'),
				'href' => $this->url->link('product/product', $url . '&product_id=' . $product_id)
			);

			$this->document->setTitle($this->language->get('text_error'));

			$data['continue'] = $this->url->link('common/home');

			$this->response->addHeader($this->request->server['SERVER_PROTOCOL'] . ' 404 Not Found');

			$data['column_left'] = $this->load->controller('common/column_left');
			$data['column_right'] = $this->load->controller('common/column_right');
			$data['content_top'] = $this->load->controller('common/content_top');
			$data['content_bottom'] = $this->load->controller('common/content_bottom');
			$data['footer'] = $this->load->controller('common/footer');
			$data['header'] = $this->load->controller('common/header');

			$this->response->setOutput($this->load->view('error/not_found', $data));
		}
	}

	public function review() {
		$this->load->language('product/product');

		$this->load->model('catalog/review');

		if (isset($this->request->get['page'])) {
			$page = (int)$this->request->get['page'];
		} else {
			$page = 1;
		}

		$data['reviews'] = array();

		$review_total = $this->model_catalog_review->getTotalReviewsByProductId($this->request->get['product_id']);

		$results = $this->model_catalog_review->getReviewsByProductId($this->request->get['product_id'], ($page - 1) * 5, 5);

		foreach ($results as $result) {
			$data['reviews'][] = array(
				'author'     => $result['author'],
				'text'       => nl2br($result['text']),
				'rating'     => (int)$result['rating'],
				'date_added' => date($this->language->get('date_format_short'), strtotime($result['date_added']))
			);
		}

		$pagination = new Pagination();
		$pagination->total = $review_total;
		$pagination->page = $page;
		$pagination->limit = 5;
		$pagination->url = $this->url->link('product/product/review', 'product_id=' . $this->request->get['product_id'] . '&page={page}');

		$data['pagination'] = $pagination->render();

		$data['results'] = sprintf($this->language->get('text_pagination'), ($review_total) ? (($page - 1) * 5) + 1 : 0, ((($page - 1) * 5) > ($review_total - 5)) ? $review_total : ((($page - 1) * 5) + 5), $review_total, ceil($review_total / 5));

		$this->response->setOutput($this->load->view('product/review', $data));
	}

	public function write() {
		$this->load->language('product/product');

		$json = array();

		if (isset($this->request->get['product_id']) && $this->request->get['product_id']) {
			if ($this->request->server['REQUEST_METHOD'] == 'POST') {
				if ((utf8_strlen($this->request->post['name']) < 3) || (utf8_strlen($this->request->post['name']) > 25)) {
					$json['error'] = $this->language->get('error_name');
				}

				if ((utf8_strlen($this->request->post['text']) < 25) || (utf8_strlen($this->request->post['text']) > 1000)) {
					$json['error'] = $this->language->get('error_text');
				}
			
				if (empty($this->request->post['rating']) || $this->request->post['rating'] < 0 || $this->request->post['rating'] > 5) {
					$json['error'] = $this->language->get('error_rating');
				}

				// Captcha
				if ($this->config->get('captcha_' . $this->config->get('config_captcha') . '_status') && in_array('review', (array)$this->config->get('config_captcha_page'))) {
					$captcha = $this->load->controller('extension/captcha/' . $this->config->get('config_captcha') . '/validate');

					if ($captcha) {
						$json['error'] = $captcha;
					}
				}

				if (!isset($json['error'])) {
					$this->load->model('catalog/review');

					$this->model_catalog_review->addReview($this->request->get['product_id'], $this->request->post);

					$json['success'] = $this->language->get('text_success');
				}
			}
		} else {
			$json['error'] = $this->language->get('error_product');
		} 

		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}

	public function getRecurringDescription() {
		$this->load->language('product/product');
		$this->load->model('catalog/product');

		if (isset($this->request->post['product_id'])) {
			$product_id = $this->request->post['product_id'];
		} else {
			$product_id = 0;
		}

		if (isset($this->request->post['recurring_id'])) {
			$recurring_id = $this->request->post['recurring_id'];
		} else {
			$recurring_id = 0;
		}

		if (isset($this->request->post['quantity'])) {
			$quantity = $this->request->post['quantity'];
		} else {
			$quantity = 1;
		}

		$product_info = $this->model_catalog_product->getProduct($product_id);
		
		$recurring_info = $this->model_catalog_product->getProfile($product_id, $recurring_id);

		$json = array();

		if ($product_info && $recurring_info) {
			if (!$json) {
				$frequencies = array(
					'day'        => $this->language->get('text_day'),
					'week'       => $this->language->get('text_week'),
					'semi_month' => $this->language->get('text_semi_month'),
					'month'      => $this->language->get('text_month'),
					'year'       => $this->language->get('text_year'),
				);

				if ($recurring_info['trial_status'] == 1) {
					$price = $this->currency->format($this->tax->calculate($recurring_info['trial_price'] * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
					$trial_text = sprintf($this->language->get('text_trial_description'), $price, $recurring_info['trial_cycle'], $frequencies[$recurring_info['trial_frequency']], $recurring_info['trial_duration']) . ' ';
				} else {
					$trial_text = '';
				}

				$price = $this->currency->format($this->tax->calculate($recurring_info['price'] * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);

				if ($recurring_info['duration']) {
					$text = $trial_text . sprintf($this->language->get('text_payment_description'), $price, $recurring_info['cycle'], $frequencies[$recurring_info['frequency']], $recurring_info['duration']);
				} else {
					$text = $trial_text . sprintf($this->language->get('text_payment_cancel'), $price, $recurring_info['cycle'], $frequencies[$recurring_info['frequency']], $recurring_info['duration']);
				}

				$json['success'] = $text;
			}
		}

		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}
}
